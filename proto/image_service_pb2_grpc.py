# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import (
    image_service_pb2 as proto_dot_image__service__pb2,
)


class ImageServiceStub(object):
    """The image service definition."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostImage = channel.unary_unary(
            "/image.ImageService/PostImage",
            request_serializer=proto_dot_image__service__pb2.PostImageRequest.SerializeToString,
            response_deserializer=proto_dot_image__service__pb2.PostImageResponse.FromString,
        )
        self.GetImage = channel.unary_unary(
            "/image.ImageService/GetImage",
            request_serializer=proto_dot_image__service__pb2.GetImageRequest.SerializeToString,
            response_deserializer=proto_dot_image__service__pb2.GetImageResponse.FromString,
        )


class ImageServiceServicer(object):
    """The image service definition."""

    def PostImage(self, request, context):
        """Sends an image to be stored and returns an UUID."""
        context.set_code(
            grpc.StatusCode.UNIMPLEMENTED
        )
        context.set_details(
            "Method not implemented!"
        )
        raise NotImplementedError(
            "Method not implemented!"
        )

    def GetImage(self, request, context):
        """Retrieves an image by UUID."""
        context.set_code(
            grpc.StatusCode.UNIMPLEMENTED
        )
        context.set_details(
            "Method not implemented!"
        )
        raise NotImplementedError(
            "Method not implemented!"
        )


def add_ImageServiceServicer_to_server(
    servicer, server
):
    rpc_method_handlers = {
        "PostImage": grpc.unary_unary_rpc_method_handler(
            servicer.PostImage,
            request_deserializer=proto_dot_image__service__pb2.PostImageRequest.FromString,
            response_serializer=proto_dot_image__service__pb2.PostImageResponse.SerializeToString,
        ),
        "GetImage": grpc.unary_unary_rpc_method_handler(
            servicer.GetImage,
            request_deserializer=proto_dot_image__service__pb2.GetImageRequest.FromString,
            response_serializer=proto_dot_image__service__pb2.GetImageResponse.SerializeToString,
        ),
    }
    generic_handler = (
        grpc.method_handlers_generic_handler(
            "image.ImageService",
            rpc_method_handlers,
        )
    )
    server.add_generic_rpc_handlers(
        (generic_handler,)
    )


# This class is part of an EXPERIMENTAL API.
class ImageService(object):
    """The image service definition."""

    @staticmethod
    def PostImage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/image.ImageService/PostImage",
            proto_dot_image__service__pb2.PostImageRequest.SerializeToString,
            proto_dot_image__service__pb2.PostImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetImage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/image.ImageService/GetImage",
            proto_dot_image__service__pb2.GetImageRequest.SerializeToString,
            proto_dot_image__service__pb2.GetImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
